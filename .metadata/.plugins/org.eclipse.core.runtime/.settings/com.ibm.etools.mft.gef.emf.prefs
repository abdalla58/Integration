//EMFPaletteRoot.Entry.com.ibm.connector.kafka./ComIbmEventInput=false;KafkaConsumer;Use the KafkaConsumer node to receive messages from Kafka;
//EMFPaletteRoot.Entry.com.ibm.connector.kafka./ComIbmOutput=false;KafkaProducer;Use the KafkaProducer node to send a message to Kafka;
//EMFPaletteRoot.Entry.com.ibm.connector.kafka./ComIbmRequest=false;KafkaRead;Use the KafkaRead node to get a message from Kafka;
EMFPaletteRoot.Drawer.ibm_adapters=false;1;WebSphere Adapters;<tok_null>;
EMFPaletteRoot.Drawer.ibm_adapters.Contents=EMFPaletteRoot.Entry.ComIbmPeopleSoftInput;EMFPaletteRoot.Entry.ComIbmPeopleSoftRequest;<tok_sep>;EMFPaletteRoot.Entry.ComIbmSAPInput;EMFPaletteRoot.Entry.ComIbmSAPRequest;EMFPaletteRoot.Entry.ComIbmSAPReply;<tok_sep>;EMFPaletteRoot.Entry.ComIbmSiebelInput;EMFPaletteRoot.Entry.ComIbmSiebelRequest;<tok_sep>;EMFPaletteRoot.Entry.ComIbmJDEdwardsInput;EMFPaletteRoot.Entry.ComIbmJDEdwardsRequest;<tok_sep>;
EMFPaletteRoot.Drawer.ibm_builtin=false;1;Built-in nodes;<tok_null>;
EMFPaletteRoot.Drawer.ibm_callableflow=false;1;Callable Flow;<tok_null>;
EMFPaletteRoot.Drawer.ibm_callableflow.Contents=EMFPaletteRoot.Entry.ComIbmCallableFlowInput;EMFPaletteRoot.Entry.ComIbmCallableFlowReply;<tok_sep>;EMFPaletteRoot.Entry.ComIbmCallableFlowInvoke;<tok_sep>;EMFPaletteRoot.Entry.ComIbmCallableFlowAsyncInvoke;EMFPaletteRoot.Entry.ComIbmCallableFlowAsyncResponse;
EMFPaletteRoot.Drawer.ibm_cics=false;1;CICS;<tok_null>;
EMFPaletteRoot.Drawer.ibm_cics.Contents=EMFPaletteRoot.Entry.ComIbmCICSIPICRequest;
EMFPaletteRoot.Drawer.ibm_cloud_connectors=false;1;Cloud Connectors;<tok_null>;
EMFPaletteRoot.Drawer.ibm_cloud_connectors.Contents=EMFPaletteRoot.Entry.ComIbmAppConnectRESTRequest;<tok_sep>;EMFPaletteRoot.Entry.com.ibm.connector.salesforce.ComIbmRequest;
EMFPaletteRoot.Drawer.ibm_construction=false;1;Construction;<tok_null>;
EMFPaletteRoot.Drawer.ibm_construction.Contents=EMFPaletteRoot.Entry.Source;EMFPaletteRoot.Entry.Sink;<tok_sep>;EMFPaletteRoot.Entry.ComIbmThrow;EMFPaletteRoot.Entry.ComIbmTrace;EMFPaletteRoot.Entry.ComIbmTryCatch;EMFPaletteRoot.Entry.ComIbmFlowOrder;EMFPaletteRoot.Entry.ComIbmPassthru;<tok_sep>;EMFPaletteRoot.Entry.ComIbmResetContentDescriptor;<tok_sep>;
EMFPaletteRoot.Drawer.ibm_corba=false;1;CORBA;<tok_null>;
EMFPaletteRoot.Drawer.ibm_corba.Contents=EMFPaletteRoot.Entry.ComIbmCORBARequest;
EMFPaletteRoot.Drawer.ibm_database=false;1;Database;<tok_null>;
EMFPaletteRoot.Drawer.ibm_database.Contents=EMFPaletteRoot.Entry.ComIbmDatabaseInput;<tok_sep>;EMFPaletteRoot.Entry.ComIbmDatabase;<tok_sep>;EMFPaletteRoot.Entry.ComIbmDatabaseRetrieve;EMFPaletteRoot.Entry.ComIbmDatabaseRoute;<tok_sep>;
EMFPaletteRoot.Drawer.ibm_dotnet=false;1;.NET;<tok_null>;
EMFPaletteRoot.Drawer.ibm_dotnet.Contents=EMFPaletteRoot.Entry.ComIbmDotNetInput;<tok_sep>;
EMFPaletteRoot.Drawer.ibm_email=false;1;Email;<tok_null>;
EMFPaletteRoot.Drawer.ibm_email.Contents=EMFPaletteRoot.Entry.ComIbmEmailInput;EMFPaletteRoot.Entry.ComIbmEmailOutput;<tok_sep>;
EMFPaletteRoot.Drawer.ibm_favorites=false;1;Favorites;<tok_null>;
EMFPaletteRoot.Drawer.ibm_file=false;1;File;<tok_null>;
EMFPaletteRoot.Drawer.ibm_file.Contents=EMFPaletteRoot.Entry.ComIbmFileInput;EMFPaletteRoot.Entry.ComIbmFileOutput;EMFPaletteRoot.Entry.ComIbmFileRead;<tok_sep>;EMFPaletteRoot.Entry.ComIbmFTEInput;EMFPaletteRoot.Entry.ComIbmFTEOutput;<tok_sep>;EMFPaletteRoot.Entry.ComIbmCDInput;EMFPaletteRoot.Entry.ComIbmCDOutput;
EMFPaletteRoot.Drawer.ibm_http=false;1;HTTP;<tok_null>;
EMFPaletteRoot.Drawer.ibm_http.Contents=EMFPaletteRoot.Entry.ComIbmWSInput;EMFPaletteRoot.Entry.ComIbmWSReply;EMFPaletteRoot.Entry.ComIbmWSRequest;EMFPaletteRoot.Entry.ComIbmHTTPHeader;EMFPaletteRoot.Entry.ComIbmHTTPAsyncRequest;EMFPaletteRoot.Entry.ComIbmHTTPAsyncResponse;<tok_sep>;
EMFPaletteRoot.Drawer.ibm_ims=false;1;IMS;<tok_null>;
EMFPaletteRoot.Drawer.ibm_ims.Contents=EMFPaletteRoot.Entry.ComIbmIMSRequest;
EMFPaletteRoot.Drawer.ibm_jms=false;1;JMS;<tok_null>;
EMFPaletteRoot.Drawer.ibm_jms.Contents=EMFPaletteRoot.Entry.ComIbmJMSClientInput;EMFPaletteRoot.Entry.ComIbmJMSClientOutput;EMFPaletteRoot.Entry.ComIbmJMSClientReply;EMFPaletteRoot.Entry.ComIbmJMSClientReceive;EMFPaletteRoot.Entry.ComIbmJMSHeader;<tok_sep>;EMFPaletteRoot.Entry.ComIbmJMSMQTransform;EMFPaletteRoot.Entry.ComIbmMQJMSTransform;<tok_sep>;
EMFPaletteRoot.Drawer.ibm_kafka_connector=false;1;Kafka;<tok_null>;
EMFPaletteRoot.Drawer.ibm_kafka_connector.Contents=EMFPaletteRoot.Entry.com.ibm.connector.kafka./ComIbmEventInput;EMFPaletteRoot.Entry.com.ibm.connector.kafka./ComIbmOutput;EMFPaletteRoot.Entry.com.ibm.connector.kafka./ComIbmRequest;<tok_sep>;
EMFPaletteRoot.Drawer.ibm_loopback_connectors=false;1;LoopBack Connectors;<tok_null>;
EMFPaletteRoot.Drawer.ibm_loopback_connectors.Contents=<tok_sep>;EMFPaletteRoot.Entry.com.ibm.connector.loopback.ComIbmRequest;
EMFPaletteRoot.Drawer.ibm_mq=false;1;IBM MQ;<tok_null>;
EMFPaletteRoot.Drawer.ibm_mq.Contents=EMFPaletteRoot.Entry.ComIbmMQInput;EMFPaletteRoot.Entry.ComIbmMQOutput;EMFPaletteRoot.Entry.ComIbmMQReply;EMFPaletteRoot.Entry.ComIbmMQGet;EMFPaletteRoot.Entry.ComIbmMQHeader;
EMFPaletteRoot.Drawer.ibm_mqtt=false;1;MQTT;<tok_null>;
EMFPaletteRoot.Drawer.ibm_mqtt.Contents=<tok_sep>;EMFPaletteRoot.Entry.com.ibm.connector.mqtt.ComIbmEventInput;EMFPaletteRoot.Entry.com.ibm.connector.mqtt.ComIbmOutput;
EMFPaletteRoot.Drawer.ibm_rest=false;1;REST;<tok_null>;
EMFPaletteRoot.Drawer.ibm_rest.Contents=EMFPaletteRoot.Entry.ComIbmRESTRequest;EMFPaletteRoot.Entry.ComIbmRESTAsyncRequest;EMFPaletteRoot.Entry.ComIbmRESTAsyncResponse;<tok_sep>;
EMFPaletteRoot.Drawer.ibm_routing=false;1;Routing;<tok_null>;
EMFPaletteRoot.Drawer.ibm_routing.Contents=EMFPaletteRoot.Entry.ComIbmFilter;EMFPaletteRoot.Entry.ComIbmLabel;EMFPaletteRoot.Entry.ComIbmPublication;EMFPaletteRoot.Entry.ComIbmRouteToLabel;EMFPaletteRoot.Entry.ComIbmRoute;<tok_sep>;EMFPaletteRoot.Entry.ComIbmAggregateControl;EMFPaletteRoot.Entry.ComIbmAggregateReply;EMFPaletteRoot.Entry.ComIbmAggregateRequest;EMFPaletteRoot.Entry.ComIbmCollector;EMFPaletteRoot.Entry.ComIbmReSequence;EMFPaletteRoot.Entry.ComIbmSequence;<tok_sep>;EMFPaletteRoot.Entry.ComIbmGroupScatter;EMFPaletteRoot.Entry.ComIbmGroupGather;EMFPaletteRoot.Entry.ComIbmGroupComplete;<tok_sep>;
EMFPaletteRoot.Drawer.ibm_rules=false;1;Rules;<tok_null>;
EMFPaletteRoot.Drawer.ibm_rules.Contents=EMFPaletteRoot.Entry.ComIbmODMRules;
EMFPaletteRoot.Drawer.ibm_security=false;1;Security;<tok_null>;
EMFPaletteRoot.Drawer.ibm_security.Contents=EMFPaletteRoot.Entry.ComIbmSecurityPEP;
EMFPaletteRoot.Drawer.ibm_soap=false;1;Web Services;<tok_null>;
EMFPaletteRoot.Drawer.ibm_soap.Contents=EMFPaletteRoot.Entry.ComIbmSOAPInput;EMFPaletteRoot.Entry.ComIbmSOAPReply;EMFPaletteRoot.Entry.ComIbmSOAPRequest;EMFPaletteRoot.Entry.ComIbmSOAPAsyncRequest;EMFPaletteRoot.Entry.ComIbmSOAPAsyncResponse;<tok_sep>;EMFPaletteRoot.Entry.ComIbmSOAPEnvelope;EMFPaletteRoot.Entry.ComIbmSOAPExtract;<tok_sep>;EMFPaletteRoot.Entry.SRRetrieveEntity;EMFPaletteRoot.Entry.SRRetrieveITService;<tok_sep>;
EMFPaletteRoot.Drawer.ibm_tcpip=false;1;TCPIP;<tok_null>;
EMFPaletteRoot.Drawer.ibm_tcpip.Contents=EMFPaletteRoot.Entry.ComIbmTCPIPClientInput;EMFPaletteRoot.Entry.ComIbmTCPIPClientOutput;EMFPaletteRoot.Entry.ComIbmTCPIPClientReceive;<tok_sep>;EMFPaletteRoot.Entry.ComIbmTCPIPServerInput;EMFPaletteRoot.Entry.ComIbmTCPIPServerOutput;EMFPaletteRoot.Entry.ComIbmTCPIPServerReceive;<tok_sep>;
EMFPaletteRoot.Drawer.ibm_timer=false;1;Timer;<tok_null>;
EMFPaletteRoot.Drawer.ibm_timer.Contents=EMFPaletteRoot.Entry.ComIbmTimeoutControl;EMFPaletteRoot.Entry.ComIbmTimeoutNotification;<tok_sep>;
EMFPaletteRoot.Drawer.ibm_transformation=false;1;Transformation;<tok_null>;
EMFPaletteRoot.Drawer.ibm_transformation.Contents=EMFPaletteRoot.Entry.ComIbmDotNetCompute;EMFPaletteRoot.Entry.ComIbmMSLMapping;EMFPaletteRoot.Entry.ComIbmXslMqsi;EMFPaletteRoot.Entry.ComIbmCompute;EMFPaletteRoot.Entry.ComIbmJavaCompute;<tok_sep>;
EMFPaletteRoot.Drawer.ibm_validation=false;1;Validation;<tok_null>;
EMFPaletteRoot.Drawer.ibm_validation.Contents=EMFPaletteRoot.Entry.ComIbmValidate;<tok_sep>;EMFPaletteRoot.Entry.ComIbmCheck;<tok_sep>;<tok_sep>;
EMFPaletteRoot.Drawer.ibm_vsam=false;1;VSAM;<tok_null>;
EMFPaletteRoot.Entry.ComIbmAggregateControl=false;AggregateControl;Use the AggregateControl node to mark the beginning of a fan-out of requests that are part of an aggregation;
EMFPaletteRoot.Entry.ComIbmAggregateReply=false;AggregateReply;AggregateReply node marks the end of an aggregation fan-in. This node collects replies and combines them into a single compound message;
EMFPaletteRoot.Entry.ComIbmAggregateRequest=false;AggregateRequest;AggregateRequest node records that request messages have been sent. It also collects information that helps the AggregateReply node to construct the compound message;
EMFPaletteRoot.Entry.ComIbmAppConnectRESTRequest=false;AppConnectRESTRequest;Use the AppConnectRESTRequest node to interact with connectors hosted on App Connect using REST;
EMFPaletteRoot.Entry.ComIbmCDInput=false;CDInput;Use the CDInput node to receive transfers from a Connect Direct server;
EMFPaletteRoot.Entry.ComIbmCDOutput=false;CDOutput;Use the CDOutput node to initiate transfers on a Connect Direct server;
EMFPaletteRoot.Entry.ComIbmCICSIPICRequest=false;CICSRequest;Allows a message flow to send synchronous requests to a CICS system either through CICS Transaction Gateway or direct;
EMFPaletteRoot.Entry.ComIbmCORBARequest=false;CORBARequest;Allows a message flow to send synchronous requests to a CORBA system using IIOP;
EMFPaletteRoot.Entry.ComIbmCallableFlowAsyncInvoke=false;CallableFlowAsyncInvoke;Allows the message flow to asynchronously call the second (callable) flow. Use a CallableFlowAsyncResponse node to receive the output from that flow.;
EMFPaletteRoot.Entry.ComIbmCallableFlowAsyncResponse=false;CallableFlowAsyncResponse;Allows the message flow to be called asynchronously when a second (callable) flow that was invoked via a CallableFlowAsyncInvoke node returns.;
EMFPaletteRoot.Entry.ComIbmCallableFlowInput=false;CallableInput;Allows a message flow to be called by another message flow;
EMFPaletteRoot.Entry.ComIbmCallableFlowInvoke=false;CallableFlowInvoke;Allows the message flow to call the second (callable) flow, and receives output from that flow;
EMFPaletteRoot.Entry.ComIbmCallableFlowReply=false;CallableReply;Allows messages to be sent back to the callable flow invoke node in the initial message flow.;
EMFPaletteRoot.Entry.ComIbmCheck=false;Check (Deprecated);Deprecated - see Validate node ;
EMFPaletteRoot.Entry.ComIbmCollector=false;Collector;Collector node collects together a set of messages according to specified criteria and combines them into a single compound message;
EMFPaletteRoot.Entry.ComIbmCompute=false;Compute;Use the Compute node to route or transform the incoming message, create new output messages by using the ESQL language. ;
EMFPaletteRoot.Entry.ComIbmDatabase=false;Database;Database node interacts with a database using ESQL statements. The ESQL code can specify the data from the input message, and perhaps transform it in some way (for example, to perform a calculation), and assign the result to a database table;
EMFPaletteRoot.Entry.ComIbmDatabaseInput=false;DatabaseInput;The Database Input node reacts to Database changes and reads the new data from the database;
EMFPaletteRoot.Entry.ComIbmDatabaseRetrieve=false;DatabaseRetrieve;The DatabaseRetrieve node is used to query and retrieve a single row from one or more tables within a database through JDBC. Selected column values can be inserted into new or existing locations within the incoming logical trees or a modified copy of the message tree can be made ;
EMFPaletteRoot.Entry.ComIbmDatabaseRoute=false;DatabaseRoute;The DatabaseRoute node is used to query and retrieve a single row from one or more tables within a database through JDBC. Selected column values can be inserted into filter expressions, used to propagate the incoming message down one or more dynamic output terminals. The message is propagated to the terminal for which the filter expression is true. These expressions might incorporate acquired database column names.;
EMFPaletteRoot.Entry.ComIbmDotNetCompute=false;.NETCompute;Use the .NETCompute node to route and transform the incoming message, create a new output message, or interact with .NET modules by using the .NET C\#, VB or F\# programming languages.;
EMFPaletteRoot.Entry.ComIbmDotNetInput=false;.NETInput;Use the .NET Input node to start a Message Flow by event processing or polling a data source using a .NET assembly;
EMFPaletteRoot.Entry.ComIbmEmailInput=false;EmailInput;EmailInput node retrieves an email from an email server supporting POP3 or IMAP;
EMFPaletteRoot.Entry.ComIbmEmailOutput=false;EmailOutput;EmailOutput node sends a message to specified email address;
EMFPaletteRoot.Entry.ComIbmFTEInput=false;FTEInput;FTEInput node receives files transferred from a remote file system using WebSphere MQSeries File Transfer Edition ;
EMFPaletteRoot.Entry.ComIbmFTEOutput=false;FTEOutput;FTEOutput node transfers data to a remote file system using WebSphere MQSeries File Transfer Edition ;
EMFPaletteRoot.Entry.ComIbmFileInput=false;FileInput;FileInput node retrieves data from a local or remote file system;
EMFPaletteRoot.Entry.ComIbmFileOutput=false;FileOutput;FileOutput node outputs data to a local or remote file system;
EMFPaletteRoot.Entry.ComIbmFileRead=false;FileRead;Use the FileRead node to read one record, or the entire contents of a file, from within a message flow;
EMFPaletteRoot.Entry.ComIbmFilter=false;Filter;Filter node routes a message according to message content. You define the route by coding a filter expression in ESQL. See also JavaCompute node;
EMFPaletteRoot.Entry.ComIbmFlowOrder=false;FlowOrder;FlowOrder node controls the order in which a message is processed by a message flow;
EMFPaletteRoot.Entry.ComIbmGroupComplete=false;GroupComplete;The GroupComplete node collects all the replies and requests that were sent as part of a group and combines them into a single message;
EMFPaletteRoot.Entry.ComIbmGroupGather=false;GroupGather;Use the GroupGather node to fan-in responses that are part of a group;
EMFPaletteRoot.Entry.ComIbmGroupScatter=false;GroupScatter;Use the GroupScatter node te mark the beginning of a fan-out of requests that are part of a group;
EMFPaletteRoot.Entry.ComIbmHTTPAsyncRequest=false;HTTPAsyncRequest;Allows a message flow to send asynchronous HTTP requests to an external HTTP service;
EMFPaletteRoot.Entry.ComIbmHTTPAsyncResponse=false;HTTPAsyncResponse;Allows a message flow to receive asynchronous HTTP replies from an external HTTP service;
EMFPaletteRoot.Entry.ComIbmHTTPHeader=false;HTTPHeader;HTTPHeader node adds, modifies and deletes HTTPHeaders in a message;
EMFPaletteRoot.Entry.ComIbmIMSRequest=false;IMSRequest;Allows a message flow to send synchronous requests to an IMS system using IMS Connect;
EMFPaletteRoot.Entry.ComIbmJDEdwardsInput=false;JDEdwardsInput;A node used to implement the JDEdwards adapter in inbound mode;
EMFPaletteRoot.Entry.ComIbmJDEdwardsRequest=false;JDEdwardsRequest;A node used to implement the JDEdwards adapter in outbound mode;
EMFPaletteRoot.Entry.ComIbmJMSClientInput=false;JMSInput;JMSInput node receives messages from JMS destinations;
EMFPaletteRoot.Entry.ComIbmJMSClientOutput=false;JMSOutput;JMSOutput node sends messages to JMS destinations;
EMFPaletteRoot.Entry.ComIbmJMSClientReceive=false;JMSReceive;JMSReceive node receives messages from a JMS Queue, in the middle of a message flow, using a JMS connection initiated by App Connect Enterprise;
EMFPaletteRoot.Entry.ComIbmJMSClientReply=false;JMSReply;JMSReply node returns a response from the message flow to the JMS client;
EMFPaletteRoot.Entry.ComIbmJMSHeader=false;JMSHeader;JMSHeader node adds and modifies JMSHeader in a message;
EMFPaletteRoot.Entry.ComIbmJMSMQTransform=false;JMSMQTransform;JMSMQTransform node transforms a JMS message into a message compatible with the WebSphere MQ JMS provider;
EMFPaletteRoot.Entry.ComIbmJavaCompute=false;JavaCompute;Use the JavaCompute node to route and transform the incoming message, create a new output message, or interact with Java classes by using Java. Optionally use JAXB to model message data. ;
EMFPaletteRoot.Entry.ComIbmLabel=false;Label;Use the Label node in combination with a RouteToLabel node to dynamically determine the route that a message takes through the message flow, based on its content;
EMFPaletteRoot.Entry.ComIbmMQGet=false;MQGet;MQGet node reads a message from a WMQ queue ;
EMFPaletteRoot.Entry.ComIbmMQHeader=false;MQHeader;MQHeader node adds, modifies and deletes MQMD and MQDLH headers in a message;
EMFPaletteRoot.Entry.ComIbmMQInput=false;MQInput;MQInput node reads a message from a WMQ queue;
EMFPaletteRoot.Entry.ComIbmMQJMSTransform=false;MQJMSTransform;MQJMSTransform node receives messages in WebSphere MQ JMS provider format, and transforms them into JMS compatible messages;
EMFPaletteRoot.Entry.ComIbmMQOutput=false;MQOutput;MQOutput sends a message to a WMQ queue;
EMFPaletteRoot.Entry.ComIbmMQReply=false;MQReply;MQReply node sends a response to the Queue specified by the originator of the input message in the ReplyToQ field;
EMFPaletteRoot.Entry.ComIbmMSLMapping=false;Mapping;Use the Mapping node to transform the incoming message, create new output messages, and interact with information in a database by using a Graphical Data Map.;
EMFPaletteRoot.Entry.ComIbmODMRules=false;ODMRules;Allows App Connect Enterprise to execute a collection of ODM rules that act on a message.;
EMFPaletteRoot.Entry.ComIbmPassthru=false;Passthrough;Passthrough node enables versioning of a subflow at run time;
EMFPaletteRoot.Entry.ComIbmPeopleSoftInput=false;PeopleSoftInput;A node used to implement the PeopleSoft adapter in inbound mode;
EMFPaletteRoot.Entry.ComIbmPeopleSoftRequest=false;PeopleSoftRequest;A node used to implement the PeopleSoft adapter in outbound mode;
EMFPaletteRoot.Entry.ComIbmPublication=false;Publication;Publication node filters output messages from a message flow and transmits them to topic subscribers in a pub/sub application;
EMFPaletteRoot.Entry.ComIbmRESTAsyncRequest=false;RESTAsyncRequest;Allows a message flow to send asynchronous REST requests that are hosted on external HTTP servers;
EMFPaletteRoot.Entry.ComIbmRESTAsyncResponse=false;RESTAsyncResponse;Allows a message flow to receive asynchronous REST responses that are hosted on external HTTP servers;
EMFPaletteRoot.Entry.ComIbmRESTRequest=false;RESTRequest;Use the RESTRequest node to interact with REST APIs hosted on external HTTP servers;
EMFPaletteRoot.Entry.ComIbmReSequence=false;Resequence;Resequence node reorders a stream of messages into sequential order;
EMFPaletteRoot.Entry.ComIbmResetContentDescriptor=false;ResetContentDescriptor;ResetContentDescriptor node forces the message to be reparsed by the specified parser;
EMFPaletteRoot.Entry.ComIbmRoute=false;Route;The Route node is used to propagate the incoming message down one or more dynamic output terminals. Which terminal is propagated to depends on filter expression resolving to true. These expressions may incoporate values extracted from elements within the incoming message tree.  ;
EMFPaletteRoot.Entry.ComIbmRouteToLabel=false;RouteToLabel;Use the RouteToLabel node in combination with one or more Label nodes to dynamically determine the route that a message takes through the message flow, based on its content;
EMFPaletteRoot.Entry.ComIbmSAPInput=false;SAPInput;A node used to implement the SAP adapter in inbound mode;
EMFPaletteRoot.Entry.ComIbmSAPReply=false;SAPReply;A node used in conjunction with the SAP input node to support synchronous RFC calls;
EMFPaletteRoot.Entry.ComIbmSAPRequest=false;SAPRequest;A node used to implement the SAP adapter in outbound mode;
EMFPaletteRoot.Entry.ComIbmSOAPAsyncRequest=false;SOAPAsyncRequest;Allows a message flow to send asynchronous SOAP requests to an external Web service;
EMFPaletteRoot.Entry.ComIbmSOAPAsyncResponse=false;SOAPAsyncResponse;Allows a message flow to receive asynchronous SOAP replies from an external Web service;
EMFPaletteRoot.Entry.ComIbmSOAPEnvelope=false;SOAPEnvelope;Adds a SOAP envelope onto an existing message;
EMFPaletteRoot.Entry.ComIbmSOAPExtract=false;SOAPExtract;Allows the removal of SOAP envelopes so that the Body of a SOAP message is more easily handled;
EMFPaletteRoot.Entry.ComIbmSOAPInput=false;SOAPInput;Allows client SOAP messages to be consumed by the message flow, thereby allowing the message flow to be a SOAP Web Services provider;
EMFPaletteRoot.Entry.ComIbmSOAPReply=false;SOAPReply;Allows SOAP response messages to be sent from the message flow back to the originating client in response to a prior message received by a SOAP Input Node;
EMFPaletteRoot.Entry.ComIbmSOAPRequest=false;SOAPRequest;Allows synchronous SOAP requests to be made from the message flow, allowing the message flow to be a SOAP Web Service consumer;
EMFPaletteRoot.Entry.ComIbmSecurityPEP=false;SecurityPEP;Security Policy Enforcement Point (PEP) node is used to invoke runtime security as defined by an associated security profile;
EMFPaletteRoot.Entry.ComIbmSequence=false;Sequence;Sequence node inserts a sequence number into a message;
EMFPaletteRoot.Entry.ComIbmSiebelInput=false;SiebelInput;A node used to implement the Siebel adapter in inbound mode;
EMFPaletteRoot.Entry.ComIbmSiebelRequest=false;SiebelRequest;A node used to implement the Siebel adapter in outbound mode;
EMFPaletteRoot.Entry.ComIbmTCPIPClientInput=false;TCPIPClientInput;The TCPIPClientInput node receives data over a TCPIP connection initiated by App Connect Enterprise  ;
EMFPaletteRoot.Entry.ComIbmTCPIPClientOutput=false;TCPIPClientOutput;The TCPIPClientOutput node sends data over a TCPIP connection initiated by App Connect Enterprise;
EMFPaletteRoot.Entry.ComIbmTCPIPClientReceive=false;TCPIPClientReceive;The TCPIPClientReceive node receives data, in the middle of a message flow, over a TCPIP connection initiated by App Connect Enterprise;
EMFPaletteRoot.Entry.ComIbmTCPIPServerInput=false;TCPIPServerInput;The TCPIPServerInput node receives data over a TCPIP connection initiated by an external application;
EMFPaletteRoot.Entry.ComIbmTCPIPServerOutput=false;TCPIPServerOutput;The TCPIPServerOutput node sends data over a TCPIP connection initiated by an external application ;
EMFPaletteRoot.Entry.ComIbmTCPIPServerReceive=false;TCPIPServerReceive;The TCPIPServerReceive node receives data, in the middle of a message flow, over a TCPIP connection initiated by an external application;
EMFPaletteRoot.Entry.ComIbmThrow=false;Throw;Throw node throws an exception within a message flow;
EMFPaletteRoot.Entry.ComIbmTimeoutControl=false;TimeoutControl;The TimeoutControl node receives an input message that contains a timeout request. The node validates the request, stores the message, and propagates the message (unchanged) to the next node;
EMFPaletteRoot.Entry.ComIbmTimeoutNotification=false;TimeoutNotification;Use a TimeoutControl node and a TimeoutNotification node together in a message flow for an application that requires events to occur at a particular time, or at regular intervals;
EMFPaletteRoot.Entry.ComIbmTrace=false;Trace;Trace node generates trace records that can incorporate text, message content, date and time information, to help monitor the flow behavior;
EMFPaletteRoot.Entry.ComIbmTryCatch=false;TryCatch;Use the TryCatch node to provide a special handler for exception processing;
EMFPaletteRoot.Entry.ComIbmValidate=false;Validate;Validate node checks that the message that arrives on its input terminal is as expected;
EMFPaletteRoot.Entry.ComIbmWSInput=false;HTTPInput;HTTPInput node receives Web service requests for processing by a message flow;
EMFPaletteRoot.Entry.ComIbmWSReply=false;HTTPReply;HTTPReply node returns a response from the message flow to the Web service client;
EMFPaletteRoot.Entry.ComIbmWSRequest=false;HTTPRequest;HTTPRequest node interacts with a Web service, using all or part of the input message as the request sent to that service;
EMFPaletteRoot.Entry.ComIbmXslMqsi=false;XSLTransform;Use the XSLTransform node to transform the incoming XML message by using an XSL style sheet. ;
EMFPaletteRoot.Entry.SRRetrieveEntity=false;RegistryLookup;RegistryLookup node is used to find specific documents in a service registry;
EMFPaletteRoot.Entry.SRRetrieveITService=false;EndpointLookup;EndpointLookup node is used to acquire specific information related to a service from a service registry;
EMFPaletteRoot.Entry.Sink=false;Output;Output node provides an out terminal for an embedded message flow (a subflow);
EMFPaletteRoot.Entry.Source=false;Input;Input node provides an in terminal for an embedded message flow (a subflow) ;
EMFPaletteRoot.Entry.com.ibm.connector.loopback.ComIbmRequest=false;LoopBackRequest;Use the LoopBackRequest node to issue synchronous requests to databases and services by using LoopBack connectors;
EMFPaletteRoot.Entry.com.ibm.connector.mqtt.ComIbmEventInput=false;MQTTSubscribe;Use the MQTTSubscribe node to subscribe to one or more MQTT topics;
EMFPaletteRoot.Entry.com.ibm.connector.mqtt.ComIbmOutput=false;MQTTPublish;Use the MQTTPublish node to publish messages to an MQTT topic;
EMFPaletteRoot.Entry.com.ibm.connector.salesforce.ComIbmRequest=false;SalesforceRequest;Use the SalesforceRequest node to perform a set of CRUD operations on the pre-defined and custom Salesforce object types;
EMFPaletteRoot.OriginalState=true
EMFPaletteRoot.RootContents=EMFPaletteRoot.Drawer.ibm_favorites;EMFPaletteRoot.Drawer.ibm_mq;EMFPaletteRoot.Drawer.ibm_mqtt;EMFPaletteRoot.Drawer.ibm_kafka_connector;EMFPaletteRoot.Drawer.ibm_jms;EMFPaletteRoot.Drawer.ibm_http;EMFPaletteRoot.Drawer.ibm_rest;EMFPaletteRoot.Drawer.ibm_soap;EMFPaletteRoot.Drawer.ibm_adapters;EMFPaletteRoot.Drawer.ibm_routing;EMFPaletteRoot.Drawer.ibm_dotnet;EMFPaletteRoot.Drawer.ibm_transformation;EMFPaletteRoot.Drawer.ibm_construction;EMFPaletteRoot.Drawer.ibm_callableflow;EMFPaletteRoot.Drawer.ibm_cloud_connectors;EMFPaletteRoot.Drawer.ibm_loopback_connectors;EMFPaletteRoot.Drawer.ibm_database;EMFPaletteRoot.Drawer.ibm_file;EMFPaletteRoot.Drawer.ibm_email;EMFPaletteRoot.Drawer.ibm_tcpip;EMFPaletteRoot.Drawer.ibm_corba;EMFPaletteRoot.Drawer.ibm_rules;EMFPaletteRoot.Drawer.ibm_cics;EMFPaletteRoot.Drawer.ibm_ims;EMFPaletteRoot.Drawer.ibm_validation;EMFPaletteRoot.Drawer.ibm_security;EMFPaletteRoot.Drawer.ibm_timer;EMFPaletteRoot.Drawer.ibm_vsam;EMFPaletteRoot.Drawer.ibm_builtin;
EMFPaletteRoot.Version=11.0.0.18
eclipse.preferences.version=1
